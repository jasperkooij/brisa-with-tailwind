#!/usr/bin/env bun
// @bun
var{defineProperty:J,getOwnPropertyNames:T,getOwnPropertyDescriptor:C}=Object,E=Object.prototype.hasOwnProperty;var D=new WeakMap,P=(e)=>{var r=D.get(e),c;if(r)return r;if(r=J({},"__esModule",{value:!0}),e&&typeof e==="object"||typeof e==="function")T(e).map((q)=>!E.call(r,q)&&J(r,q,{get:()=>e[q],enumerable:!(c=C(e,q))||c.enumerable}));return D.set(e,r),r},O=(e,r)=>()=>(r||e((r={exports:{}}).exports,r),r.exports);var U=(e,r)=>{for(var c in r)J(e,c,{get:r[c],enumerable:!0,configurable:!0,set:(q)=>r[c]=()=>q})};var V=(e,r)=>()=>(e&&(r=e(e=0)),r);import K from"process";import ee from"os";import S from"tty";function ie(){const e=K?.env??{};if(!e.FORCE_COLOR)return;if(e.FORCE_COLOR==="true"||e.FORCE_COLOR.length===0)return!0;if(e.FORCE_COLOR==="false")return!1;return Math.min(Number.parseInt(e.FORCE_COLOR,10),3)>0}function F(){const e=K?.env??{},r=ie();if(r!==void 0)return r;if(!S.isatty(1)&&!S.isatty(2))return!1;if(K.platform==="win32"){const c=ee.release().split(".");return Number(c[0])>=10&&Number(c[2])>=10586}return e.TERM!=="dumb"}var g;var I=V(()=>{g=F()});var R={};U(R,{yellowLog:()=>ue,redLog:()=>ne,greenLog:()=>re,cyanLog:()=>be,boldLog:()=>se,blueLog:()=>de});var re=(e)=>g?`\x1B[32m${e}\x1B[0m`:e,ue=(e)=>g?`\x1B[33m${e}\x1B[0m`:e,ne=(e)=>g?`\x1B[31m${e}\x1B[0m`:e,de=(e)=>g?`\x1B[34m${e}\x1B[0m`:e,be=(e)=>g?`\x1B[36m${e}\x1B[0m`:e,se=(e)=>g?`\x1B[1m${e}\x1B[0m`:e;var X=V(()=>{I()});var h=O((we,xe)=>{xe.exports={name:"brisa",version:"0.1.1",description:"Brisa, the next-gen web framework.",repository:{type:"git",url:"https://github.com/brisa-build/brisa.git"},license:"MIT",author:{name:"Brisa Team",email:"contact@brisa.build.com"},type:"module",exports:{".":{import:"./out/core/index.js",require:"./out/core/index.js",bun:"./out/core/index.js",node:"./out/core/index.js"},"./jsx-runtime":{import:"./jsx-runtime/index.js",require:"./jsx-runtime/index.js",bun:"./jsx-runtime/index.js",node:"./jsx-runtime/index.js"},"./jsx-dev-runtime":{import:"./jsx-dev-runtime/index.js",require:"./jsx-dev-runtime/index.js",bun:"./jsx-dev-runtime/index.js",node:"./jsx-dev-runtime/index.js"},"./client":{import:"./client/index.js",require:"./client/index.js",bun:"./client/index.js",node:"./client/index.js"},"./client-simplified":{import:"./client-simplified/index.js",require:"./client-simplified/index.js",bun:"./client-simplified/index.js",node:"./client-simplified/index.js"},"./server":{import:"./server/index.js",require:"./server/index.js",bun:"./server/index.js",node:"./server/index.js"},"./macros":{import:"./macros/index.js",require:"./macros/index.js",macro:"./macros/index.js",bun:"./macros/index.js",node:"./macros/index.js"},"./compiler":{import:"./compiler/index.js",require:"./compiler/index.js",macro:"./compiler/index.js",bun:"./compiler/index.js",node:"./compiler/index.js"},"./server/node":{import:"./server/node.js",require:"./server/node.js",bun:"./server/node.js",node:"./server/node.js"},"./test":{import:"./test/index.js",require:"./test/index.js",bun:"./test/index.js",node:"./test/index.js"},"./cli.js":{import:"./cli.js",require:"./cli.js",bun:"./cli.js",node:"./cli.js"}},main:"./out/core/index.js",module:"./out/core/index.js",types:"./out/core/index.d.ts",bin:{brisa:"./cli.js"},files:["out","jsx-runtime","jsx-dev-runtime","client","client-simplified","server","macros","compiler","test","cli.js"],workspaces:["packages/*"],scripts:{build:"bun run clean && bun run build:jsx-runtime && bun run build:jsx-dev-runtime && bun run build:core && bun run build:core-client && bun run build:core-server && bun run build:core-macros && bun run build:core-test && bun run build:core-compiler","build:cli":"bun build --minify --target=bun --outdir=./ cli.ts && bun run build:cli-utils","build:cli-utils":"bun build --minify --target=bun --outdir=out/cli src/cli/build.ts src/cli/build-standalone/index.ts && bun build --minify --target=node --outdir=out/cli src/cli/serve/index.tsx src/cli/integrations/mdx/index.ts src/cli/integrations/tailwindcss/index.ts src/cli/integrations/pandacss/index.ts","build:core":"bun build --minify --outdir=out/core src/core/index.ts && bun run build:cli && cp src/types/index.d.ts out/core/index.d.ts","build:core-compiler":"cd scripts && bun run core-compiler-build.ts && cd .. && cp src/types/compiler.d.ts compiler/index.d.ts","build:core-macros":"bun build --minify --target=bun --outdir=macros src/core/macros/index.ts && bun run build:cli","build:core-client":"bun build --minify --outdir=client src/core/client/index.ts && bun run build:core-client-simplified && bun run build:cli","build:core-client-simplified":"bun build --minify --outdir=client-simplified src/core/client/index.ts --define '__TRAILING_SLASH__=false' --define '__WEB_CONTEXT_PLUGINS__=false' --define '__BASE_PATH__=\"\"' --define '__ASSET_PREFIX__=\"\"' --define '__USE_LOCALE__=false' --define '__USE_PAGE_TRANSLATION__=false'","build:core-server":"bun build --minify --target=node --outdir=server src/core/server/index.ts src/core/server/node.ts && bun run build:cli && cp src/types/server.d.ts server/index.d.ts && cp src/types/server.node.d.ts server/node.d.ts","build:core-test":"bun build --minify --target=bun --outdir=test src/core/test/index.ts && bun run build:cli && cp src/types/test.d.ts test/index.d.ts","build:jsx-dev-runtime":"bun build --minify --target=bun --outdir=jsx-dev-runtime src/jsx-runtime/index.ts && cp src/types/index.d.ts jsx-dev-runtime/index.d.ts","build:jsx-runtime":"bun build --minify --target=bun --outdir=jsx-runtime src/jsx-runtime/index.ts && cp src/types/index.d.ts jsx-runtime/index.d.ts",clean:"rm -rf out jsx-runtime jsx-dev-runtime cli client server cli.js",release:"bun run build && npm publish && bun run clean","release:canary":"bun run build && npm publish --tag next && bun run clean",test:"bun test","test:node":"node --test \"**/*.node-test.js\"","test:coverage":"bun test --coverage","tsc:check":"tsc --noEmit --skipLibCheck"},dependencies:{astring:"1.9.0",csstype:"3.1.3","diff-dom-streaming":"0.6.1",meriyah:"6.0.2"},devDependencies:{"@happy-dom/global-registrator":"15.7.4","@types/bun":"1.1.10",brisa:"latest","@types/mime-types":"2.1.4","mime-types":"2.1.35",typescript:"5.6.2","brisa-tailwindcss":"workspace:*","brisa-pandacss":"workspace:*"},packageManager:"bun@1.1.30",engines:{bun:">= 1.1.30",npm:"please-use-bun",yarn:"please-use-bun",pnpm:"please-use-bun"}}});async function o({currentBunVersion:e,brisaPackageManager:r}){const c=await import(y.resolve(i.cwd(),"package.json")).then((l)=>l.default),q=N.randomBytes(32).toString("hex"),L=N.randomBytes(8).toString("hex"),A=i.env.BRISA_BUILD_FOLDER,Y=r?.replace?.("bun@","");if(!Bun.semver.satisfies(e,">="+Y)){const u=i.platform==="win32"?`iex "& {\$(irm https://bun.sh/install.ps1)} -Version ${e}"`:`curl -fsSL https://bun.sh/install | bash -s "bun-v${e}"`;console.log(Q(`Warning: Your current Bun version is not supported by the current version of Brisa, but you can still use older versions from Brisa. Please upgrade Bun to ${Y} or later to use latest version of Brisa.\n`)),console.log(Q("You can upgrade Bun by running:\n")),console.log(Q(u)),console.log(Q("\nAfter upgrading, you can run Brisa again"))}const v={stdio:"inherit",env:{...i.env,NODE_ENV:"production",BRISA_BUILD_FOLDER:A,__CRYPTO_KEY__:q,__CRYPTO_IV__:L}},j={stdio:"inherit",env:{...i.env,NODE_ENV:"development",BRISA_BUILD_FOLDER:A,__CRYPTO_KEY__:q,__CRYPTO_IV__:L}};let b,$,z=!1,m="bun";try{const l=await import(y.join(i.cwd(),"brisa.config.ts")).then((s)=>s.default);if(typeof l.output==="string")m=l.output,z=qe.has(m)}catch(l){}try{if(d.spawnSync("bun",["--version"],{stdio:"ignore"}).status===0)b="bun",$="bunx";else b=`${i.env.HOME}/.bun/bin/bun`,$=`${i.env.HOME}/.bun/bin/bunx`;if(i.argv[2]==="dev"){let u=i.env.PORT??3000,s=!1;for(let t=3;t<i.argv.length;t++)switch(i.argv[t]){case"--skip-tauri":case"-s":z=!1;break;case"-p":case"--port":u=+i.argv[t+1],t++;break;case"-d":case"--debug":s=!0;break;case"--help":return console.log("Usage: brisa dev [options]"),console.log("Options:"),console.log(" -p, --port         Specify port"),console.log(" -d, --debug        Enable debug mode"),console.log(" -s, --skip-tauri   Skip open tauri app when 'output': 'desktop' | 'android' | 'ios' in brisa.config.ts"),console.log(" --help             Show help"),i.exit(0)}const f=[a,"DEV"],n=[_,u.toString(),"DEV"];if(z){const t=["tauri","dev","--port",u.toString()];if(W.has(m))t.splice(1,0,m);await M(j,u),d.spawnSync(b,f,j),d.spawn(b,n,j),d.spawnSync($,t,j)}else if(s)d.spawnSync(b,f,j),d.spawnSync(b,["--inspect",...n],j);else d.spawnSync(b,f,j),d.spawnSync(b,n,j)}else if(i.argv[2]==="build"){const u=new Set,s=new Set;let f="PROD";for(let x=3;x<i.argv.length;x++)switch(i.argv[x]){case"--dev":case"-d":v.env.NODE_ENV="development",f="DEV";break;case"--component":case"-c":case"--web-component":case"-w":const k=i.argv[x].includes("w"),H=i.argv[x+1];if(!H||!w.existsSync(H)){const B=k?"--web-component (-w)":"--component (-c)",p=k?"-w some/web-component.tsx":"-c some/server-component.tsx";return console.log(Z(`Ops!: using ${B} flag you need to specify a file.`)),console.log(Z(`Example: brisa build ${p}`)),i.exit(0)}else if(k)u.add(H);else s.add(H);break;case"--skip-tauri":case"-s":z=!1;break;case"--help":return console.log("Usage: brisa build [options]"),console.log("Options:"),console.log(" -d, --dev           Build for development (useful for custom server)"),console.log(" -w, --web-component Build standalone web component to create a library"),console.log(" -c, --component     Build standalone server component to create a library"),console.log(" -s, --skip-tauri    Skip open tauri app when 'output': 'desktop' | 'android' | 'ios' in brisa.config.ts"),console.log(" --help              Show help"),i.exit(0)}const n=[a,f],t=u.intersection(s);if(t.size>0){const x=Array.from(t.values()).join(" -w ");console.log(Z("Error: The --web-component flag automatically builds both client and server. Using the same file for both --component (-c) and --web-component (-w) flags is not allowed.")),console.log(Z(`Suggestion: Use only the --web-component flag instead: brisa build -w ${x}`)),i.exit(1)}if(u.size||s.size){n[0]=fe;for(let x of u)n.push("WC"),n.push(x);for(let x of s)n.push("SC"),n.push(x);d.spawnSync(b,n,v)}else if(z){const x=["tauri","build"];if(W.has(m))x.splice(1,0,m);await M(v),d.spawnSync(b,n,v),d.spawnSync($,x,v)}else d.spawnSync(b,n,v)}else if(i.argv[2]==="start"){let u=i.env.PORT??3000;for(let n=3;n<i.argv.length;n++)switch(i.argv[n]){case"-p":case"--port":u=+i.argv[n+1],n++;break;case"--help":return console.log("Usage: brisa start [options]"),console.log("Options:"),console.log(" -p, --port    Specify port"),console.log(" --help        Show help"),i.exit(0)}const s=m==="node",f=s?"node":b;console.log(ve,`\uD83D\uDE80 Brisa ${le}: Runtime on `+(s?`Node.js ${i.version}`:`Bun.js ${Bun.version}`)),d.spawnSync(f,[_,u.toString(),"PROD"],v)}else if(i.argv[2]==="add"){const u=i.argv[3]?.toLowerCase();if(u==="mdx")console.log("Installing @mdx-js/esbuild..."),d.spawnSync(b,["i","@mdx-js/esbuild@3.0.1"],j),d.spawnSync(b,[ce],j);else if(u==="tailwindcss")d.spawnSync(b,[me],j);else if(u==="pandacss")d.spawnSync(b,[ye],j);else return console.log("Integration not found"),console.log("Usage: brisa add <integration>"),console.log("Integrations:"),console.log(" mdx          Add mdx integration"),console.log(" tailwindcss  Add tailwindcss integration"),console.log(" pandacss     Add pandacss integration"),console.log("Options:"),console.log(" --help       Show help"),i.exit(0)}else return console.log("Command not found"),console.log("Usage: brisa [options] <command>"),console.log("Options:"),console.log(" --help        Show help"),console.log("Commands:"),console.log(" dev           Start development server"),console.log(" build         Build for production"),console.log(" start         Start production server"),console.log(" add           Add integrations (e.g., mdx, tailwindcss, pandacss)"),i.exit(0)}catch(l){return console.error("Error:",l.message),i.exit(1)}async function M(l=j,u=i.env.PORT??3000){const s=y.join(i.cwd(),"src-tauri","tauri.conf.json"),f=w.existsSync(s),n=W.has(m);if(!c?.dependencies?.["@tauri-apps/cli"])console.log("Installing @tauri-apps/cli..."),d.spawnSync(b,["i","@tauri-apps/cli@2.0.0"],l);if(f&&n)d.spawnSync($,["tauri",m,"init"],l);if(f)return;const t=c?.name??"my-app",x=["tauri","init","-A",t,"-W",t,"-D","../out","--dev-url",`http://localhost:${u}`,"--before-dev-command",`echo 'Starting ${m} app...'`,"--before-build-command",`echo 'Building ${m} app...'`];if(console.log("Initializing Tauri..."),d.spawnSync($,x,l),!w.existsSync(s))return;const k=await import(s).then((H)=>H.default);if(k.identifier=`com.${t}`,w.writeFileSync(s,JSON.stringify(k,null,2)),n)d.spawnSync($,["tauri",m,"init"],l)}}var{blueLog:te,yellowLog:Q,redLog:Z}=(X(),P(R)),d=import.meta.require("child_process"),y=import.meta.require("path"),w=import.meta.require("fs"),N=import.meta.require("crypto"),i=import.meta.require("process"),{version:le,packageManager:je}=h(),G=y.join(import.meta.dir,"out").replace(`node_modules${y.sep}.bin`,`node_modules${y.sep}brisa`),ce=y.join(G,"cli","integrations","mdx","index.js"),me=y.join(G,"cli","integrations","tailwindcss","index.js"),ye=y.join(G,"cli","integrations","pandacss","index.js"),a=y.join(G,"cli","build.js"),fe=y.join(G,"cli","build-standalone","index.js"),_=y.join(G,"cli","serve","index.js"),W=new Set(["android","ios"]),qe=new Set(["android","ios","desktop"]),ve=te("[ info ] ")+" ";var ge=o;if(import.meta.main)o({currentBunVersion:Bun.version,brisaPackageManager:je});export{ge as main};
